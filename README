Description
===========

Smith: Super Mega Intuitive Todolist Helper

Smith is more than a todolist manager, smith is designed not only to show you
that you have unresolved tasks, but also to actively help you to resolve them.

Smith let's you link your tasks with scripts to be more reactive when dealing
with tasks, that way you can automatically launch your media player to see the
next cat video on your watchlist, open your mail client well configured to
answer that mail from your boss and more...

Edition commands use the EDITOR environnement variable.

Documentation
=============

Usage: smith [options] [ID...]

Arguments:
    ID      A tasks IDbe it a unique ID or a
            position number relative to the last command

            ID supports special keywords:
                all         all tasks
                last        the last updated task
                recent      the five last updated tasks
                finished    all finished tasks
                virgins     all tasks with no progress at all
                byprogress  all tasks, most advanced first
                bydate      all tasks, by date of creation (more recent first)

Options:
    -s, --show              Show tasks
    -t, --task              Create or edit a task
    -a, --action            Add or edit a task's action
    -r, --remove            Remove a task
    -d, --do                Do the action associated with a task
                            and update the progress accordingly
    -i, --import FILE       Read from a file the tasks to be added
                            If FILE is - then read from stdin
    -o, --export            Prints raw json task data to stdout
    -u, --update            Increments the task's progress by
    -U, --update-by N       Updates the task's progress by N
    -f, --file FILE         Use FILE to load and save the todolist
                            Default is ~/.config/smith/todolist
    -D, --script-dir DIR    Looks in DIR to find scripts
                            Default is ~/.config/smith/scripts/
    -c, --compact           Show tasks in a compact format
    -v, --verbose           Show more details about the tasks
    -R, --reverse           Reverse the order of the tasks
    -h, --help              Print this help and exit
    -V, --version           Print the version number and exit


How to make the magic happen
============================

« I want to study SICP using MIT's OpenCourseWare videos, and take notes at
  the same time, while keeping track of my progress. Can Smith help me? »

It is exactly what it is for!

Let's start a new task:

    $ smith -t

    Editing [14a506183f8] New task:
    Title [New task]: SICP

    # We let it at 0, as we haven't seen any video
    Progress [0]:

    # There are 20 videos
    Limit [1]: 20

    # While at it, we will make a generic script for opencourseware ?
    Script []: ocw_videos

    # A generic script will need the url of the course in argument
    # (Of course you would put the real url here)
    Script_args []: http://ocw.mit.edu/courses/..../video-lectures/

    # No comment here
    Comment []:


The task is created, we can see it:

    $ smith -s last

    [0:14a506183f8] SICP              [                        ] 0/20

Let's edit the script now to really add the action:

    $ smith -a last

    (Our favorite editor is launched here)

    #!/bin/sh
    #
    # Open Course Ware
    # This is a script for the SMITH todolist management tool
    # It is called with the following arguments:
    #      the current progress of the task
    #      the limit set for the task
    #      the argument field of the task

    PLAYER="vlc"
    LISTURL="$3"

    # This builds the url of the youtube video associated with the lesson
    URL="http://ocw.mit.edu$(curl -s "$LISTURL"                        |\
                             tr '"' '\n'                               |\
                             grep "/courses/.*/video-lectures/"        |\
                             grep -v "rss.xml"                         |\
                             uniq                                      |\
                             sed -n "$1p")"

    "$PLAYER" "$URL" &
    "$EDITOR"

    # Gets confirmation that the task is done
    echo -n "Is it ok? [Y/n] "
    read ok

    if [ "$ok" = "n" -o "$ok" = "N" ] ; then
        exit 0
    else
        exit 1
    fi

Wow. This was a rather complicated script, but it does a rather complicated
job as we tried to make it generic enought to be reused unchanged.

But here it is, everything is now in place.

It is time to try it.

    $ smith -d last

    (VLC launches here on the video while vim starts a new document)
    Is it ok? [Y/n] y

As the return code of the script is 0, the progress is updated.

    $ smith -s last

    [0:14a506183f8] SICP              [#                       ] 1/20

And you can now reuse this script with another course without having to set
everything up again, you will just have to set the same script name and the
corresponding extra argument.


Dependencies
============

This program relies on python3

docopt      You can install it with   pip3 install docopt

Files
=====

Related files are written in ~/.config/smith by default.

TODO
====

[+] Prettier output
[-] Test every options
[ ] Transparent imports over the network

License
=======

This program is under the GPLv3 License.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

Contact
=======

Main developper: Cédric Picard
Email:           cedric.picard@efrei.net
Twitter:         @Cym13
GPG:             383A 76B9 D68D 2BD6 9D2B  4716 E3B9 F4FE 5CED 42CB
